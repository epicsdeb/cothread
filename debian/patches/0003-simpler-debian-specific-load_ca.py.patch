From: Michael Davidsaver <mdavidsaver@bnl.gov>
Date: Sat, 4 Oct 2014 12:15:42 -0400
Subject: simpler debian specific load_ca.py

---
 cothread/cadef.py   |   3 +-
 cothread/load_ca.py | 110 ++++++++++++++++------------------------------------
 2 files changed, 35 insertions(+), 78 deletions(-)

diff --git a/cothread/cadef.py b/cothread/cadef.py
index 6651b00..106ce84 100644
--- a/cothread/cadef.py
+++ b/cothread/cadef.py
@@ -33,7 +33,7 @@ See http://www.aps.anl.gov/epics/base/R3-14/11-docs/CAref.html for detailed
 documentation of the functions below.
 
 This module is a thin wrapper over the cadef.h file to be found in
-    $EPICS_BASE/include/cadef.h
+    /usr/lib/epics/include/cadef.h
 '''
 
 __all__ = [
@@ -398,7 +398,6 @@ ca_host_name = libca.ca_host_name
 ca_host_name.argtypes = [ctypes.c_void_p]
 ca_host_name.restype = ctypes.c_char_p
 
-
 #   read = ca_read_access(channel_id)
 #   write = ca_write_access(channel_id)
 #
diff --git a/cothread/load_ca.py b/cothread/load_ca.py
index 1184ad7..e5cbc51 100644
--- a/cothread/load_ca.py
+++ b/cothread/load_ca.py
@@ -32,94 +32,52 @@
 # This file can also be run as a standalone script to discover the path to
 # libca.
 
+# Original version replaced by Debian specific version
+# Problems with library detection should therefore be
+# reported to mdavidsaver@bnl.gov
+
 from __future__ import print_function
 
 import ctypes
 import platform
 import os
 
-
-# Figure out the libraries that need to be loaded and the loading method.
 load_library = ctypes.cdll.LoadLibrary
 system = platform.system()
-if system == 'Windows':
-    load_library = ctypes.windll.LoadLibrary
-    lib_files = ['Com.dll', 'ca.dll']
-elif system == 'Darwin':
-    lib_files = ['libca.dylib']
-else:
-    lib_files = ['libca.so']
 
+if system!='Linux':
+    raise OSError('This version of cothread has been patched in a way which only works on Linux')
 
-def _libca_path(load_libca_path):
-    # We look for libca in a variety of different places, searched in order:
-    #
-    # 1. Firstly if CATOOLS_LIBCA_PATH is set in the environment we take that as
-    #    gospel.  This allows the remaining search to be overridden.
-    # 2  If the libca_path module is present we accept the value it defines.
-    # 3. Check for local copies of the libca file(s).
-    # 4. Finally check for EPICS_BASE and compute appropriate architecture
 
-    # First allow a forced override
-    libca_path = os.environ.get('CATOOLS_LIBCA_PATH')
-    if libca_path:
-        return libca_path
+# Known to be ABI compatible SO names for libca
+# Extend the list of directories search in the usual way (eg. LD_LIBRARY_PATH)
+libnames = [
+	'libca.so.3.14.11',
+	'libca.so.3.14.12',
+	'libca.so.3.14.12.3',
+	'libca.so.3.15.3',
+	'libca.so.3.15.6',
+	'libca.so.3.16.1',
+]
+# Allow user to provide additional names (eg "libca.so.3.15:libca.so.3.15.1")
+# These are checked first.
+libnames = filter(len, os.environ.get('LIBCA_NAMES',"").split(':') ) + libnames
 
-    # Next import from configuration file if present, unless this has been
-    # disabled.
-    if load_libca_path:
+def findca():
+    for name in libnames:
         try:
-            # If libca_path has been defined go with that
-            from .libca_path import libca_path
-            return libca_path
-        except ImportError:
-            pass
-
-    # If no libca_path, how about local copies of the files?
-    libca_path = os.path.abspath(os.path.dirname(__file__))
-    if os.path.isfile(os.path.join(libca_path, lib_files[-1])):
-        # Yes, there seems to be something locally installed.
-        return libca_path
-
-    # No local install, no local configuration, no override.  Try for standard
-    # environment variable configuration instead.
-    epics_base = os.environ['EPICS_BASE']
-    # Mapping from host architecture to EPICS host architecture name can be done
-    # with a little careful guesswork.  As EPICS architecture names are a little
-    # arbitrary this isn't guaranteed to work.
-    system_map = {
-        ('Linux',   '32bit'):   'linux-x86',
-        ('Linux',   '64bit'):   'linux-x86_64',
-        ('Darwin',  '32bit'):   'darwin-x86',
-        ('Darwin',  '64bit'):   'darwin-x86',
-        ('Windows', '32bit'):   'win32-x86',
-        ('Windows', '64bit'):   'windows-x64',  # Not quite yet!
-    }
-    bits = platform.architecture()[0]
-    epics_host_arch = system_map[(system, bits)]
-    return os.path.join(epics_base, 'lib', epics_host_arch)
-
+            lib = load_library(name)
+            return (lib, name)
+        except OSError:
+            pass # file didn't exist
+    raise OSError("""Couldn't find libca.
+Looked for: %s
+If libca is installed in an uncommon location try setting LD_LIBRARY_PATH
+in your environment.  If your libca has a different (or no) SONAME then
+Set LIBCA_NAMES to a colon seperated list of SONAMEs.
+"""%(', '.join(libnames)))
 
-if __name__ == '__main__':
-    # If run standalone we are a helper script.  Write out the relevant
-    # definitions for the use of our caller.
-    libca_path = _libca_path(False)
-    print('CATOOLS_LIBCA_PATH=\'%s\'' % libca_path)
-    print('LIB_FILES=\'%s\'' % ' '.join(lib_files))
+libca, libca_name = findca()
 
-else:
-    # Load the library (or libraries).
-    try:
-        # First try loading the libraries directly without searching anywhere.
-        # In this case we'll pick up from the path or anything already loaded
-        # into the interpreter.
-        for lib in lib_files:
-            libca = load_library(lib)
-    except OSError:
-        # Ask _libca_path() where to find things.
-        libca_path = _libca_path(True)
-        if os.path.isfile(libca_path):
-            libca = load_library(libca_path)
-        else:
-            for lib in lib_files:
-                libca = load_library(os.path.join(libca_path, lib))
+if __name__=='__main__':
+    print("Found libca as: '%s'"%libca_name)
